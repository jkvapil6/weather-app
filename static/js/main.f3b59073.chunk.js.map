{"version":3,"sources":["js/helpers/formatHelper.js","components/WeatherChart.js","components/CurrentWeather.js","components/Forecast.js","components/Whisperer.js","components/CitySearchBar.js","components/MainPage.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["exports","getNowDateFormated","dt","Date","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","getSeconds","formatDate_DDMM_HHMM","WeatherChart","props","useState","window","innerWidth","graphWidth","setGraphWidth","useEffect","handleResize","width","addEventListener","removeEventListener","className","height","data","weather","margin","top","right","left","bottom","strokeDasharray","dataKey","isAnimationActive","type","stroke","CurrentWeather","setWeather","handleNewResponse","res","cod","main","temp","toFixed","ForecastGraph","name","setName","country","setCountry","forecastWeather","city","w","list","map","i","time","formatHelper","concat","currentWeather","Whisperer","searchResults","c","onClick","handleCityChange","id","key","length","slice","CitySearchBar","searchValue","setSearchValue","setSearchResults","onChange","e","searched","target","value","cities","filter","includes","placeholder","cityId","fetchWeather","api_key","MainPage","setForecastWeather","setCurrentWeather","fetch","then","json","src","alt","Forecast","Footer","href","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3b59073.chunk.js","sourcesContent":["///\r\n/// Function returns String of the current time\r\n///\r\nexports.getNowDateFormated = () => {\r\n  const dt = new Date()\r\n\r\n  return `${dt\r\n    .getDate().toString().padStart(2, \"0\")}.${(dt\r\n    .getMonth()+ 1).toString().padStart(2, \"0\")}.${dt\r\n    .getFullYear().toString().padStart(4, \"0\")} ${dt\r\n    .getHours().toString().padStart(2, \"0\")}:${dt\r\n    .getMinutes().toString().padStart(2, \"0\")}:${dt\r\n    .getSeconds().toString().padStart(2, \"0\")}`\r\n}\r\n\r\n\r\n///\r\n/// Function returns formated date as DD.MM HH:MM \r\n///\r\nexports.formatDate_DDMM_HHMM = (dt) => {\r\n  return `${dt\r\n    .getDate().toString().padStart(2, \"0\")}.${(dt\r\n    .getMonth()+ 1).toString().padStart(2, \"0\")}. ${dt\r\n    .getHours().toString().padStart(2, \"0\")}:${dt\r\n    .getMinutes().toString().padStart(2, \"0\")}`\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,\r\n} from 'recharts';\r\n\r\n\r\n///\r\n/// WeatherChart component\r\n///\r\nconst WeatherChart = (props) => {\r\n\r\n  const [graphWidth, setGraphWidth] =  useState(window.innerWidth * 0.55)\r\n\r\n  // Graph resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const width = window.innerWidth * 0.55\r\n      if (width < 600) {\r\n        setGraphWidth(600)\r\n      } else setGraphWidth(width)\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize)\r\n    }\r\n  })\r\n\r\n  //////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"WeatherChart\">\r\n        <h3>5-Day Weather Forecast</h3>\r\n       <LineChart\r\n          width={graphWidth}\r\n          height={300}\r\n          data={props.weather}\r\n          margin={{\r\n            top: 5, right: 30, left: 20, bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" />\r\n          <YAxis dataKey=\"temp\" />\r\n          <Tooltip />\r\n          <Line isAnimationActive={false} type=\"monotone\" dataKey=\"temp\" stroke=\"#56ade3\" />      \r\n        </LineChart>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherChart\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n///\r\n/// CurrentWeather component\r\n///\r\nconst CurrentWeather = (props) => {\r\n\r\n  const [weather, setWeather] = useState(0)\r\n\r\n  useEffect(() => {\r\n    handleNewResponse(props.weather)\r\n  }, [props.weather])\r\n\r\n  ///\r\n  /// OpenWeather current weather response handler\r\n  ///\r\n  const handleNewResponse = (res) => {\r\n    if (res.cod === 200) {\r\n      setWeather((res.main.temp - 273.15).toFixed(1))\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"CurrentWeather\">\r\n      <h3>Current Weather</h3>\r\n      <h2> { weather }Â°C </h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrentWeather\r\n","\r\nimport React, { useState, useEffect } from 'react'\r\nimport WeatherChart from './WeatherChart'\r\nimport CurrentWeather from './CurrentWeather'\r\n\r\nimport formatHelper from '../js/helpers/formatHelper'\r\n\r\n///\r\n/// ForecastGraph component\r\n///\r\nconst ForecastGraph = (props) => {\r\n\r\n  const [name, setName] = useState(\"\")\r\n  const [country, setCountry] = useState(\"\")\r\n  const [weather, setWeather] = useState([])\r\n\r\n  useEffect(() => {\r\n    handleNewResponse(props.forecastWeather)\r\n  }, [props.forecastWeather])\r\n\r\n  ///\r\n  /// OpenWeather 5-day forecast response handler\r\n  ///\r\n  const handleNewResponse = (res) => {\r\n    if (res.cod === \"200\") {\r\n      setName(res.city.name)\r\n      setCountry(res.city.country)\r\n\r\n      const w = res.list.map(i => { \r\n        return {\r\n          time: formatHelper.formatDate_DDMM_HHMM(new Date(i.dt * 1000)), \r\n          temp: (i.main.temp - 273.15).toFixed(2)\r\n        }\r\n      })\r\n\r\n      setWeather(w)\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"Forecast\">\r\n      <header className=\"Forecast-header\">\r\n        <h2>{ name.concat(\" (\").concat(country).concat(\")\") }</h2>\r\n      </header>\r\n      <div className=\"Forecast-info\">\r\n        <CurrentWeather weather={props.currentWeather}/>\r\n        \r\n      </div>\r\n      <WeatherChart weather={weather} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForecastGraph\r\n","\r\nimport React from 'react'\r\n\r\n///\r\n/// Whisperer component\r\n///\r\nconst Whisperer = (props) => {\r\n\r\n  const list = props.searchResults.map(c => (\r\n    <li onClick={() => props.handleCityChange(c.id)} key={c.id}> \r\n      { c.name.length <= 25 ? c.name : c.name.slice(0, 25).concat('...') } ({c.country}) \r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"Whisperer\">\r\n      <ul>  \r\n        { list }     \r\n      </ul> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Whisperer","\r\nimport React, { useState } from 'react'\r\n\r\n// very memory intensive - should be optimized by loading each city from remote db\r\nimport cities from '../js/city.list.json'\r\n\r\nimport Whisperer from './Whisperer'\r\n///\r\n/// Cities Search Bar component\r\n///\r\nconst CitySearchBar = (props) => {\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const [searchResults, setSearchResults] = useState([])\r\n\r\n  ///\r\n  /// Handles change input event\r\n  ///\r\n  const handleOnChangeInput = (e) => {\r\n\r\n    const searched = e.target.value\r\n    setSearchValue(searched)\r\n\r\n    if (!searched) {\r\n      setSearchResults([])\r\n      return\r\n    }\r\n\r\n    const res = cities.filter(c => c.name.includes(searched))\r\n                      .slice(0, 7)\r\n                      \r\n    if (res.length < 1) {\r\n      setSearchResults([])\r\n    } else {\r\n      setSearchResults(res)\r\n    }\r\n  }\r\n\r\n  ///\r\n  /// Handles city change\r\n  ///\r\n  const handleCityChange = (cityId) => {\r\n    props.fetchWeather(cityId)\r\n    setSearchResults([])\r\n  }\r\n \r\n  //////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"SearchBar\">\r\n      <input \r\n        type=\"text\" \r\n        onChange={handleOnChangeInput} \r\n        value={searchValue}\r\n        placeholder=\"Select City\"\r\n      />\r\n\r\n\r\n      <Whisperer \r\n        searchResults={searchResults} \r\n        handleCityChange={handleCityChange} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CitySearchBar","\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport Forecast from './Forecast'\r\nimport CitySearchBar from './CitySearchBar'\r\n\r\nconst api_key = '259486d1d22b8309af6ffd18e24cba04'\r\n\r\n///\r\n/// Main page component\r\n///\r\nconst MainPage = (props) => {\r\n\r\n  const [forecastWeather, setForecastWeather] = useState([])\r\n  const [currentWeather, setCurrentWeather] = useState({}) \r\n  const [cityId, ] = useState(2643743) // London\r\n\r\n  useEffect(() => {\r\n    fetchWeather(cityId)\r\n  }, [cityId])\r\n\r\n  ///\r\n  /// Loads weather immediately when component is loaded \r\n  ///\r\n  const fetchWeather = (cityId) => {\r\n\r\n    // fetch current weather\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?id=${cityId}&appid=${api_key}`)\r\n      .then(res => res.json())\r\n      .then(data => setCurrentWeather(data))\r\n\r\n    // fetch 5-day weather forecast\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&appid=${api_key}`)\r\n      .then(res => res.json())\r\n      .then(data => setForecastWeather(data))\r\n  }\r\n  \r\n  //////////////////////////////////////\r\n  \r\n  return (\r\n    <div className=\"MainPage\">\r\n      <header className=\"MainPage-header\">\r\n          <img src=\"https://image.flaticon.com/icons/svg/365/365237.svg\" alt=\"Logo\" width=\"50px\"/>\r\n          <h1>Weather Forecast</h1>\r\n          <CitySearchBar fetchWeather={fetchWeather} />\r\n      </header>\r\n      \r\n      <Forecast \r\n        forecastWeather={forecastWeather} \r\n        currentWeather={currentWeather}\r\n      />\r\n    \r\n    {/*       \r\n      <button onClick={() => console.log(currentWeather)}>Current</button>\r\n      <button onClick={() => console.log(forecastWeather)}>Forecast</button>       */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainPage","import React from 'react'\r\n\r\n///\r\n/// Footer component\r\n///\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <p>Made by <a href=\"https://github.com/jkvapil6\">Jan Kvapil</a></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","\nimport React from 'react'\nimport './App.css'\n\nimport MainPage from './components/MainPage'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}